name: S3 to RDS Workflow

on:
  push:
    branches:
      - main

jobs:
  process-sql:
    runs-on: ubuntu-latest  # 기본 환경을 Ubuntu로 설정

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install dependencies
        run: |
          pip install boto3 mysql-connector-python

      - name: Validate Environment Variables
        run: |
          if [ -z "${LOCAL_DB_HOST}" ] || [ -z "${LOCAL_DB_USER}" ] || [ -z "${LOCAL_DB_PASSWORD}" ] || [ -z "${LOCAL_DB_NAME}" ]; then
            echo "Missing environment variables for preprocess.py"
            exit 1
          fi
          if [ -z "${RDS_HOST}" ] || [ -z "${RDS_USERNAME}" ] || [ -z "${RDS_PASSWORD}" ] || [ -z "${RDS_DATABASE}" ]; then
            echo "Missing environment variables for app.py"
            exit 1
          fi
        env:
          LOCAL_DB_HOST: ${{ secrets.LOCAL_DB_HOST }}
          LOCAL_DB_USER: ${{ secrets.LOCAL_DB_USER }}
          LOCAL_DB_PASSWORD: ${{ secrets.LOCAL_DB_PASSWORD }}
          LOCAL_DB_NAME: ${{ secrets.LOCAL_DB_NAME }}
          RDS_HOST: ${{ secrets.RDS_HOST }}
          RDS_USERNAME: ${{ secrets.RDS_USERNAME }}
          RDS_PASSWORD: ${{ secrets.RDS_PASSWORD }}
          RDS_DATABASE: ${{ secrets.RDS_DATABASE }}

  test-windows-mysql:
    runs-on: windows-latest  # Windows 환경에서 실행
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Test MySQL Connection (Windows Only)
        env:
          MYSQL_HOST: ${{ secrets.LOCAL_DB_HOST }}
          MYSQL_PORT: "3306"
          MYSQL_USER: ${{ secrets.LOCAL_DB_USER }}
          MYSQL_PASSWORD: ${{ secrets.LOCAL_DB_PASSWORD }}
        run: |
          echo "Testing MySQL Connection..."
          "C:/Program Files/MySQL/MySQL Server 8.0/bin/mysql.exe" -h %MYSQL_HOST% -P %MYSQL_PORT% -u %MYSQL_USER% -p%MYSQL_PASSWORD% -e "SHOW DATABASES;"

  upload-to-s3:
    runs-on: ubuntu-latest  # Ubuntu 환경에서 S3 업로드 실행
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run SQL Dump and Upload to S3
        env:
          LOCAL_DB_HOST: ${{ secrets.LOCAL_DB_HOST }}
          LOCAL_DB_USER: ${{ secrets.LOCAL_DB_USER }}
          LOCAL_DB_PASSWORD: ${{ secrets.LOCAL_DB_PASSWORD }}
          LOCAL_DB_NAME: ${{ secrets.LOCAL_DB_NAME }}
          TABLE_NAME: ${{ secrets.TABLE_NAME }}
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
          S3_DIRECTORY: "sql_backups/"
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: python preprocess.py

  import-to-rds:
    runs-on: ubuntu-latest  # Ubuntu 환경에서 RDS 데이터베이스에 Import 실행
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run SQL Download and Import to RDS
        env:
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
          S3_DIRECTORY: "sql_backups/"
          RDS_HOST: ${{ secrets.RDS_HOST }}
          RDS_USERNAME: ${{ secrets.RDS_USERNAME }}
          RDS_PASSWORD: ${{ secrets.RDS_PASSWORD }}
          RDS_DATABASE: ${{ secrets.RDS_DATABASE }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
        run: python app.py
